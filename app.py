# -*- coding: utf-8 -*-
"""HedgeFund Multi-Agent System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i8klJFdXK87nW4Z9sD5cyI0kYj9a0bDx
"""

# -*- coding: utf-8 -*-
"""
HedgeFund Multi-Agent System for Hugging Face Spaces
Live market data, realistic fees/taxes, beginner-friendly inputs,
JSON-safe costs, and Markdown report showing calculations.
"""

import os, json, textwrap, datetime as dt
from typing import Optional, Dict, Any, List
import yfinance as yf
import gradio as gr
from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI

# -----------------------------
# Step 0: Configure OpenAI API
# -----------------------------
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MODEL_NAME = "gpt-4o-mini"
TEMPERATURE = 0.2
llm = ChatOpenAI(model=MODEL_NAME, temperature=TEMPERATURE)

# -----------------------------
# Step 1: Simplified Inputs Helper
# -----------------------------
def default_inputs(
    goal: str,
    start_money: float = 10000.0,
    risk_level: str = "Medium",
    assets: Optional[List[str]] = None,
    frequency: str = "Daily",
    start_date: Optional[str] = None
) -> Dict[str, Any]:
    if not start_date:
        start_date = dt.date.today().isoformat()
    return {
        "goal": goal.strip(),
        "start_money": start_money,
        "risk_level": risk_level,
        "assets": assets or [],
        "frequency": frequency,
        "start_date": start_date
    }

# -----------------------------
# Step 2: Market data helper
# -----------------------------
def get_market_prices(assets: List[str]) -> Dict[str, float]:
    prices = {}
    for asset in assets:
        try:
            data = yf.Ticker(asset)
            price = data.history(period="1d")["Close"][-1]
            prices[asset] = round(price, 2)
        except Exception:
            prices[asset] = None
    return prices

# -----------------------------
# Step 3: Fee/Tax helper
# -----------------------------
def compute_trade_cost(trade_value: float, fee_pct=0.1, tax_pct=0.0):
    fee = trade_value * (fee_pct / 100)
    tax = trade_value * (tax_pct / 100)
    net_effect = trade_value - fee - tax
    return round(fee,2), round(tax,2), round(net_effect,2)

# -----------------------------
# Step 4: Define Agents
# -----------------------------
manager_agent = Agent(
    role="Manager Agent",
    backstory="Coordinates all agents and compiles final portfolio report.",
    goal="Synthesize portfolio, trades, risk, and costs into JSON + Markdown report.",
    allow_delegation=False,
    llm=llm,
)

market_agent = Agent(
    role="Market Agent",
    backstory="Collects market data and generates signals.",
    goal="Provide market trends and buy/sell/hold signals.",
    allow_delegation=False,
    llm=llm,
)

analyzer_agent = Agent(
    role="Analyzer Agent",
    backstory="Analyzes financial news sentiment.",
    goal="Return sentiment scores (+1,0,-1) per asset.",
    allow_delegation=False,
    llm=llm,
)

trader_agent = Agent(
    role="Trader Agent",
    backstory="Proposes trades based on signals and sentiment.",
    goal="Suggest buy/sell/hold decisions and quantities.",
    allow_delegation=False,
    llm=llm,
)

risk_agent = Agent(
    role="Risk Agent",
    backstory="Monitors risk and approves/rejects trades.",
    goal="Approve/reject trades based on chosen risk level.",
    allow_delegation=False,
    llm=llm,
)

tax_agent = Agent(
    role="Tax Agent",
    backstory="Calculates fees and net effect of trades.",
    goal="Provide net cost after fees/taxes using trade value.",
    allow_delegation=False,
    llm=llm,
)

# -----------------------------
# Step 5: Define Tasks
# -----------------------------
def make_tasks(inputs: Dict[str, Any]) -> List[Task]:
    assets = inputs['assets']
    prices = get_market_prices(assets)

    t1 = Task(
        description=textwrap.dedent(f"""
        Collect market data and generate signals.
        Use real market prices: {prices}
        Return STRICT JSON:
        {{
            "market_signals": [
                {{"asset": "...", "signal": "buy/sell/hold", "price": 0.0, "confidence": 0-1}}
            ]
        }}
        """).strip(),
        agent=market_agent,
        expected_output="JSON only."
    )

    t2 = Task(
        description=textwrap.dedent(f"""
        Analyze news sentiment.
        Input: market signals
        Return STRICT JSON:
        {{
            "sentiments": [
                {{"asset": "...", "score": -1|0|1, "reason": "..."}}
            ]
        }}
        """).strip(),
        agent=analyzer_agent,
        expected_output="JSON only."
    )

    t3 = Task(
        description=textwrap.dedent(f"""
        Propose trades based on signals + sentiment.
        Input: market_signals + sentiments
        Return STRICT JSON:
        {{
            "trades": [
                {{"asset": "...", "action": "buy/sell/hold", "quantity": 0}}
            ]
        }}
        """).strip(),
        agent=trader_agent,
        expected_output="JSON only."
    )

    t4 = Task(
        description=textwrap.dedent(f"""
        Approve/reject trades based on risk level: {inputs['risk_level']}.
        Input: trades
        Return STRICT JSON:
        {{
            "risk_approval": [
                {{"trade_id": "...", "approved": true/false, "reason": "..."}}
            ]
        }}
        """).strip(),
        agent=risk_agent,
        expected_output="JSON only."
    )

    t5 = Task(
        description=textwrap.dedent(f"""
        Calculate fees (0.1%) and net effect.
        Input: approved trades and market prices {prices}
        Return STRICT JSON:
        {{
            "costs": [
                {{"trade_id": "...", "fee": 0.0, "tax": 0.0, "net_effect": 0.0}}
            ]
        }}
        """).strip(),
        agent=tax_agent,
        expected_output="JSON only."
    )

    t6 = Task(
    description=textwrap.dedent("""
    Synthesize final portfolio and Markdown report with tables and insights.
    Inputs: all previous JSON outputs (market_signals, sentiments, trades, risk_approval, costs)
    Requirements:
    1. Portfolio Summary (Markdown table: Asset | Action | Quantity | Price ($) | Approved)
    2. Trades Executed (Markdown table: Trade ID | Action | Approved | Fee ($) | Tax ($) | Net Effect ($))
    3. Risk Approvals (Markdown table: Trade ID | Approved | Reason)
    4. Fees & Taxes (shown in Trades Executed table)
    5. Insights & Recommendations:
       - Provide 1-2 beginner-friendly bullet points per asset, explaining:
         * Why the trade was executed or held
         * Any risk considerations
         * Any fee/tax impact
    - All numeric values must be pre-computed (JSON-safe)
    - Return STRICT JSON:
    {
      "final_portfolio": [...],
      "trade_summary": [...],
      "report_markdown": "..."
    }
    """).strip(),
    agent=manager_agent,
    expected_output="JSON only."
)


    return [t1, t2, t3, t4, t5, t6]

# -----------------------------
# Step 6: Run HedgeFund Crew
# -----------------------------
def run_hedgefund(goal: str, start_money: float = 10000, risk_level: str = "Medium",
                  assets: str = "", frequency: str = "Daily", start_date: Optional[str] = None):
    assets_list = [a.strip() for a in assets.split(",")] if assets else []
    inputs = default_inputs(goal, start_money, risk_level, assets_list, frequency, start_date)
    tasks = make_tasks(inputs)

    crew = Crew(
        agents=[market_agent, analyzer_agent, trader_agent, risk_agent, tax_agent, manager_agent],
        tasks=tasks,
        process=Process.sequential,
        verbose=True,
        memory=True,
        cache=True,
    )

    result = crew.kickoff(inputs=inputs)

    def coerce_json(text: str) -> Dict[str, Any]:
        try:
            return json.loads(text)
        except Exception:
            start = text.find("{")
            end = text.rfind("}")
            if start != -1 and end != -1:
                return json.loads(text[start:end+1])
            raise

    final = coerce_json(str(result))

    # Save outputs
    out_dir = "hedgefund_outputs"
    os.makedirs(out_dir, exist_ok=True)
    stamp = dt.datetime.now().strftime("%Y%m%d_%H%M%S")

    # Markdown report
    md_path = os.path.join(out_dir, f"portfolio_report_{stamp}.md")
    md_content = final.get("report_markdown", "# HedgeFund Portfolio Report\n\n(No report generated)")
    with open(md_path, "w", encoding="utf-8") as f:
        f.write(md_content)

    # JSON bundle
    json_path = os.path.join(out_dir, f"portfolio_{stamp}.json")
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(final, f, indent=2, ensure_ascii=False)

    return {
        "markdown_path": md_path,
        "json_path": json_path,
        "markdown_preview": md_content[:1500] + ("\n...[truncated]..." if len(md_content) > 1500 else ""),
        "json_preview": json.dumps(final, indent=2)[:1500] + ("\n...[truncated]..." if len(json.dumps(final)) > 1500 else "")
    }

# -----------------------------
# Step 7: Beginner-Friendly Gradio UI
# -----------------------------
def gradio_run(goal, start_money, risk_level, assets, frequency, start_date):
    out = run_hedgefund(goal, start_money, risk_level, assets, frequency, start_date)
    return out["markdown_preview"], out["markdown_path"], out["json_path"]

with gr.Blocks(title="HedgeFund Multi-Agent System") as demo_ui:
    gr.Markdown("# HedgeFund Multi-Agent System")
    with gr.Row():
        goal = gr.Textbox(label="Your Investment Goal", placeholder="Grow my portfolio safely over 5 days", lines=2)
        start_money = gr.Number(label="Starting Money ($)", value=10000)
        risk_level = gr.Dropdown(label="Risk Level", choices=["Low", "Medium", "High"], value="Medium")
    with gr.Row():
        assets = gr.Textbox(label="Assets to Focus On (optional, comma separated)", placeholder="AAPL, TSLA")
        frequency = gr.Dropdown(label="Trading Frequency", choices=["Daily", "Weekly"], value="Daily")
        start_date = gr.Textbox(label="Start Date (YYYY-MM-DD, optional)", placeholder="Leave blank for today")
    run_btn = gr.Button("Run Agents 🚀")
    md_out = gr.Markdown(label="Portfolio Report Preview")
    md_file = gr.File(label="Download Markdown")
    json_file = gr.File(label="Download JSON")

    run_btn.click(
        gradio_run,
        inputs=[goal, start_money, risk_level, assets, frequency, start_date],
        outputs=[md_out, md_file, json_file]
    )

demo_ui.launch(share=True)
